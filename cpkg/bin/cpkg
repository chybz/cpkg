#!/bin/bash

##############################################################################
#
# Global variables
#
##############################################################################
ME=$(basename $0)
MYDIR=$(dirname $0)
MYDIR=$(cd $MYDIR && pwd)
MYTOPDIR=$(cd $MYDIR/.. && pwd)
export CPKG_BIN=$MYDIR/$ME
export CONFIGURED=0

##CPKG_DIRS##
# CPKG BOOTSTRAP BEGIN
if [ -z "$LIBDIR" ]; then
    export BINDIR=$MYTOPDIR/bin
    export ETCDIR=$MYTOPDIR/etc
    export LIBDIR=$MYTOPDIR/lib
    export SHAREDIR=$MYTOPDIR/share
    export VARDIR=$MYTOPDIR/var
    export LOGDIR=$MYTOPDIR/log
fi
# CPKG BOOTSTRAP END

. $LIBDIR/libcpkg.sh

##############################################################################
#
# Functions
#
##############################################################################
function cpkg_configure() {
    if (($CONFIGURED)); then
        return
    fi

    lp_configure_package
    cp_configure_package
    cp_process_templates $SHAREDIR/templates/PKG $TOPDIR

    local PRE=$(cp_dump_list PKG_DEPS)
    CPKG_TMPL_PRE+=("$PRE")
    cp_process_templates $PKGTMPL $PKG_ROOTDIR

    CONFIGURED=1
}

function cpkg_build() {
    lp_prepare_package_directory
    cp_run_support_modules
    lp_process_package_files
    lp_clean_packages_scripts
    cp_delete_bootstrap
}

function cpkg_install() {
    cp_ensure_dir_is_writable "$DESTDIR/"
    $RSYNC $RSYNC_OPTS $PKG_STAGEDIR/ $DESTDIR/
}

function cpkg_package() {
    if (($PKG_UPDATE)); then
        cpkg_configure

        if (($CPKG_IS_DEB)); then
            cpkg_build
        fi
    fi

    lp_build_package

    if (($PKG_INSTALL)); then
        lp_install_local_package
    fi
}

function cpkg_clean() {
    # Clean previous package directories
    [[ -d $PKG_ROOTDIR ]] && rm -rf $PKG_ROOTDIR
}

##############################################################################
#
# Main part
#
##############################################################################
declare -A CFGOPTS=()
declare -A PKGOPTS=()

if (($CPKG_IS_PKGSRC)); then
    PPATH=$PKGSRC_DIR
    [[ -n "$PKG_CAT" && -n "$PKG_NAME" ]] && PPATH+="/$PKG_CAT/$PKG_NAME"

    # Configure options
    CFGOPTS[P]="PKG_UPDATE::update pkgsrc files in $PPATH:no"
    CFGOPTS[p]="PKGSRC_LOCAL_UPDATE::creates local pkgsrc files:no"
elif (($CPKG_IS_DEB)); then
    CFGOPTS[P]="PKG_UPDATE::update debian packaging files:no"
fi

CFGOPTS[D]="CPKG_DEBUG::debug mode:no"

# Package options
cp_copy_hash PKGOPTS CFGOPTS

PKGOPTS[I]="PKG_INSTALL::install package:no"

cp_add_command "configure" CFGOPTS
cp_add_command "build"
cp_add_command "install"
cp_add_command "package" PKGOPTS
cp_add_command "clean"

cp_get_options "$@"

# Check configuration was loaded
cp_ensure_file_exists $CPKG_CONF
cp_check_conf
cp_ensure_dir_exists $PKG_SOURCEDIR

if ! [[ "$CPKG_CMD" =~ ^(configure|clean)$ ]]; then
    if [[ ! -d $PKG_ROOTDIR ]]; then
        cpkg_configure
    fi
fi

case $CPKG_CMD in
    configure)
        cpkg_configure
        ;;
    build)
        cpkg_build
        ;;
    install)
        cpkg_install
        ;;
    package)
        cpkg_package
        ;;
    clean)
        cpkg_clean
        ;;
    *)
        cp_error "invalid command: $COMMAND"
        ;;
esac

##############################################################################
#
# POD Documentation
#
##############################################################################
: <<=cut
=pod

=head1 NAME

cpkg - simplified package generator

=head1 DESCRIPTION

cpkg is a simplified package builder allowing you to
automate most packaging related tasks.

=head1 SYNOPSIS

  cpkg

=cut
